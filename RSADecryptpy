from Crypto.Util.number import *
from random import getrandbits
e = 65537

n=131323483269997771427706628600625414116440914332666310334953777378674569508057982081765375932174126274506296093477548698109588222626801391885728614617257484357237280229292692296287774857132861428673185547238723621966092399039657163004336140887565693633899722340882301402059860232155876868479809000205151928933
p=11675794994013467083103010877702176686890402872340848904110518782005346149315496125045725192725877979652404457379369417467193033514676365182119752933466037


q=11247498207816366224444605016810352436432463048221476872376608125790534664917948433517541713168295745270683728342343898300928917042853880558737563991565809


ct=19501768153346217447657203229479165557711946635692074671753657499513150328526121393025320747852625476176014490864538288731240840635356235199135881555810470127077830061358483700219588133363078670556664545500606256832706490819791302572290875989152563134481185939691117014406292338886837492261631668001304412097

d=calculate_d(e, calculate_phi_n(p, q))
print("Flag:",decrypt(p, q, e, n, ct))
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def extended_gcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = extended_gcd(b % a, a)
        return (g, x - (b // a) * y, y)

def mod_inv(a, m):
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise Exception('Modular inverse does not exist')
    else:
        return x % m

def decrypt(p, q, e, n, ct):
    phi = (p - 1) * (q - 1)
    gcd, a, b = extended_gcd(e, phi)
    d = a
    if d < 0:
        d += phi
    pt = pow(ct, d, n)
    return long_to_bytes(pt)
